using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Data;

namespace CIMSave
{
    public static class SQLDataRowExtensions
    {
        public static void MaybeAddRow(this DataTable fileDt, DataRow myRow)
        {
            // save previous row
            //if (myRow != null)
            if (myRow?.RowState == DataRowState.Detached)
            {
                myRow.EndEdit();
                fileDt.Rows.Add(myRow);
            }
        }
    }

    public class SQLHandlerBase
    {
        private static string _connectionString;
        private static string _schema;
        private static string _tableprefix;

        public SQLHandlerBase()
        {
            if (_connectionString == null || _connectionString.Length == 0)
            {
                _connectionString = CommandlineParameters.Value("database", "");
                if (_connectionString?.Length < 1)
                {
                    var conxStrings = System.Configuration.ConfigurationManager.ConnectionStrings;
                    _connectionString = conxStrings["database"].ConnectionString;
                }
            }
            if (_schema == null || _schema.Length == 0 || 
                _tableprefix == null || _tableprefix.Length == 0 )
            {

                _schema = CommandlineParameters.Value("schema","dbo").Trim();
                _tableprefix = CommandlineParameters.Value("TablePrefix","CIM_").Trim();
                if (_schema?.Length < 1) {
                    var settings = System.Configuration.ConfigurationManager.AppSettings;
                    //_connectionString = settings["database"].Trim();
                    _schema = settings["schema"].Trim();
                }
                if (_tableprefix?.Length <1)
                {
                    var settings = System.Configuration.ConfigurationManager.AppSettings;
                    _tableprefix = settings["TablePrefix"].Trim();
                }

            }
        }


        public string ConnectionString => _connectionString;
        public string Schema => _schema;
        public string TablePrefix => _tableprefix;

        public T DoQuery<T>(string sqlQuery, T defaultValue, string paramName, string paramValue)
        {
            var p = new List<SqlParameter>
            {
                new SqlParameter($"@{paramName}", paramValue)
            };
            return DoQuery<T>(sqlQuery, defaultValue, p);
        }

        public T DoQuery<T>(string sqlQuery, T defaultValue, List<SqlParameter> paramList)
        {
            T result = defaultValue;
            using (SqlConnection con = new SqlConnection(ConnectionString))
            {
                con.Open();
                using (SqlCommand command = new SqlCommand(sqlQuery, con))
                {
                    foreach (var p in paramList)
                    {
                        command.Parameters.Add(p);
                    }
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            result = reader.GetFieldValue<T>(0);
                        }
                    }
                }
            }
            return result;
        }


        public T DoQuery<T>(string sqlQuery, T defaultValue)
        {
            T result = defaultValue;
            using (SqlConnection con = new SqlConnection(ConnectionString))
            {
                con.Open();
                using (SqlCommand command = new SqlCommand(sqlQuery, con))
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        result = reader.GetFieldValue<T>(0);
                    }

                }
            }
            return result;
        }


        public T2 DoQueryScaler<T1, T2>(string sqlQuery, T2 defaultValue, string paramName, T1 paramValue)
        {
            var p = new List<SqlParameter>
            {
                new SqlParameter($"@{paramName}", paramValue)
            };
            return DoQueryScaler<T2>(sqlQuery, defaultValue, p);
        }

        public T DoQueryScaler<T>(string sqlQuery, T defaultValue, List<SqlParameter> paramList)
        {
            T result = defaultValue;
            using (SqlConnection con = new SqlConnection(ConnectionString))
            {
                con.Open();
                using (SqlCommand command = new SqlCommand(sqlQuery, con))
                {
                    foreach (var p in paramList)
                    {
                        command.Parameters.Add(p);
                    }
                    object scaler = command.ExecuteScalar();
                    if (scaler == null)
                    {
                        result = defaultValue;
                    }
                    else if (scaler == System.DBNull.Value) //(scaler != null)
                    {
                        result = defaultValue;
                    }
                    else
                    {
                        result = (T)scaler;
                    }
                }
            }
            return result;
        }


        public T DoQueryScaler<T>(string sqlQuery, T defaultValue)
        {
            T result = defaultValue;
            using (SqlConnection con = new SqlConnection(ConnectionString))
            {
                con.Open();
                using (SqlCommand command = new SqlCommand(sqlQuery, con))
                {
                    var scaler = command.ExecuteScalar();
                    if (scaler != null)
                    {
                        result = (T)scaler; 
                    }
                }
            }
            return result;
        }

        public int DoQueryNonScaler(string sqlQuery)
        {
            int result = 0;
            using (SqlConnection con = new SqlConnection(ConnectionString))
            {
                con.Open();
                using (SqlCommand command = new SqlCommand(sqlQuery, con))
                {
                    result = command.ExecuteNonQuery();
                }
            }
            return result;
        }


    }

    public class DBMapper<T1, T2>
    {
        // keep up name to ID translation, no need to go back to SQL for this batch run.
        static ConcurrentDictionary<T1, T2> xIDs = new ConcurrentDictionary<T1, T2>();
        static readonly string[] xquerys = new string[]
        {           // try these queries to see if can find the named entity id, or create a named entity id
            "Select id from [%SCHEMA%].[%TABLEPREFIX%%TABLE%] Where %NAMEPARAMETER% = @%NAMEPARAMETER%",
            "Insert into [%SCHEMA%].[%TABLEPREFIX%%TABLE%] (%NAMEPARAMETER%) OUTPUT Inserted.ID Values(@%NAMEPARAMETER%)",
            "Select id from [%SCHEMA%].[%TABLEPREFIX%%TABLE%] Where %NAMEPARAMETER% = @%NAMEPARAMETER%"
        };

        private SQLHandlerBase sqlbase;
        private readonly List<string> InstanceQueries;
        private readonly string NameParameter;
        private readonly T2 DefaultValue;

        public DBMapper(string tablename, T2 defaultvalue, string nameparameter = "name")
        {
            sqlbase = new SQLHandlerBase();
            NameParameter = nameparameter;
            this.DefaultValue = defaultvalue;
            InstanceQueries = (from q in xquerys select Clean(q, tablename, nameparameter)).ToList();
        }
        private string Clean(string cleanthis, string table, string nameparameter)
        {
                return new StringBuilder(cleanthis)
                      .Replace("%SCHEMA%", sqlbase.Schema )
                      .Replace("%TABLEPREFIX%", sqlbase.TablePrefix)
                      .Replace("%TABLE%", table)
                      .Replace("%NAMEPARAMETER%", nameparameter)
                      .ToString();
        }

        public T2 ID(T1 Name)
        {
            if (xIDs.TryGetValue(Name, out T2 idCache))
            {
                return idCache;
            }
            var sqlbase = new SQLHandlerBase();
            foreach (var query in InstanceQueries)
            {
                T2 id = sqlbase.DoQueryScaler<T1,T2>(query, DefaultValue, NameParameter, Name);
                if (id != null && !id.Equals(DefaultValue))
                {
                    xIDs.TryAdd(Name, id); // save value to id for next round of lookups, then return it
                    return id;
                }
            }
            return DefaultValue;
        }
    }

    public class DBTableMaker
    {
        static readonly string SampleTable =
            @"CREATE TABLE [dbo].[CIM_%TABLE%] (
                [Id]          INT IDENTITY (1, 1) NOT NULL,
                [%PRIME%]     %TYPE%           NOT NULL,
                [Description] NVARCHAR (150) NULL,
                PRIMARY KEY CLUSTERED ([Id] ASC));";
        static readonly string SampleIndex =
        @"CREATE UNIQUE NONCLUSTERED INDEX [ix%TABLE%_%PRIME%] ON [dbo].[CIM_%TABLE%]([%PRIME%] ASC);";

        private string NewTable = string.Empty;
        private string NewIndex = string.Empty;

        public bool ValidateTable(string tableName, string valueName, string valueType)
        {
            bool result = true;
            NewTable = Clean(SampleTable, tableName, valueName, valueType);
            NewIndex = Clean(SampleIndex, tableName, valueName, valueType);
            var table = Clean("[dbo].[CIM_%TABLE%]", tableName, valueName, valueType);
            var index = Clean("[ix%TABLE%_%PRIME%]", tableName, valueName, valueType);
            var tableOk = IfExists(table);
            if (!tableOk)
            {
                var handlerBase = new SQLHandlerBase();
                var newTable = handlerBase.DoQueryNonScaler(NewTable);
                //result = false;
            }
            var indexOk = IfIndexExists(table, index);
            if (!indexOk)
            {
                var handlerBase = new SQLHandlerBase();
                var newIndex = handlerBase.DoQueryNonScaler(NewIndex);
            }
            return result;
        }

        private bool IfExists(string objectname)
        {
            const string IfObjectExists = "select IIF( Object_id('%objectname%') is null, 0, 1)";
            bool result = false;
            var handlerBase = new SQLHandlerBase();
            var qry = IfObjectExists.Replace("%objectname%", objectname);
            var rc = handlerBase.DoQueryScaler<int>(qry, -2);
            return result;
        }

        //"Select IIF( Object_id('%objectname%') is null, 0, 1)";

        // IndexProperty(Object_Id('MyTable'), 'MyIndex', 'IndexId') 

        private bool IfIndexExists(string objectname, string objectname2)
        {
            const string IfObjectIndexExists =
            "Select IIF(IndexProperty(Object_Id('%object%'), '%index%', 'IndexId') is null, 0, 1)";
            bool result = false;
            var handlerBase = new SQLHandlerBase();
            var qry = IfObjectIndexExists
                        .Replace("%object%", objectname)
                        .Replace("%index%", objectname2);
            result = handlerBase.DoQueryScaler<bool>(qry, false);
            return result;
        }

        private string Clean(string cleanthis, string table, string nameparameter, string datatype)
        {
            return new StringBuilder(cleanthis)
                  .Replace("%TABLE%", table)
                  .Replace("%PRIME%", nameparameter)
                  .Replace("%TYPE%", datatype)
                  .ToString();
        }
    }
}
