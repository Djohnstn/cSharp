[CimCollect]
CimCollect=Yes
; [[CimCollect]] is the header for one of these INI style files ; is comment
; [x] is data set name
; Name=key
;[[[fake]]]
;name=name
;s= multi-
;s= -line
;s= -command
;powerscript=[[tag[[
;	lots of script stuff here
;	and more script here
;	ending with line of tagged close brackets
;]]tag]]

[BIOS]
CimCollect=No
Name=Manufacturer
powershell=([wmisearcher]"Select * from win32_bios").Get()

[DiskPhysical]
Name=DeviceID
powershell=([wmisearcher]"Select DeviceID, manufacturer, Size, Caption, Description from win32_DiskDrive").Get()

[DiskLogical]
Name=DeviceID
powershell=([wmisearcher]"Select DeviceID, Size, FreeSpace, Caption, Description from win32_LogicalDisk").Get()

[Printer]
Name=Name
; @" ... "@ is a Powershell multiline test string
s=[[*/*[[
$q=@"
	Select Name, Availability, Description, DeviceID, DriverName, PortName, PrinterState, 
		PrinterStatus, PrintJobDataType, PrintProcessor, SpoolEnabled, SeparatorFile, Queued, Status,
		StatusInfo, Published, Shared, ShareName, Direct, Location, Priority, WorkOffline,
		HorizontalResolution, VerticalResolution from Win32_Printer
"@
	([wmisearcher]$q).Get()
]]*/*]]

[PhysicalMemory]
Name=Name
powershell=([wmisearcher]"Select * from Win32_PhysicalMemory").Get()

[Certificate]
Name=FriendlyName
s=[[*/*[[
	Get-ChildItem Cert:\LocalMachine\My |
	Select FriendlyName , Thumbprint, Issuer, Subject, NotAfter, NotBefore, SerialNumber, Version, Handle
]]*/*]]

[Service]
Name=Name
s=[[*/*[[
	Get-WMIObject Win32_Service|
	Select Name, pathname, State,Caption,Description,ErrorControl,DelayedAutoStart,DisplayName,Started,StartMode,Start
]]*/*]]

[CertificateInIIS]
CimCollect=No
Name=FriendlyName
s=[[*/*[[
	$sites = Get-Website | ? { $_.State -eq "Started" } | % { $_.Name }
	$certs = Get-ChildItem IIS:SSLBindings | ? {
           $sites -contains $_.Sites.Value
         } | % { $_.Thumbprint }
	Get-ChildItem CERT:LocalMachine/My | 
		? { $certs -contains $_.Thumbprint }|
		Select thumbPrint, FriendlyName, NotBefore, NotAfter, Issuer, DnsNameList, Subject
]]*/*]]

[LocalUser]
CimCollect=No
Name=Name
s=[[
	Import-Module Microsoft.Powershell.LocalAccounts
	Get-LocalUser |
	Select Name, FullName, Description, LastLogon, SID, AccountExpires, Enabled, PasswordLastSet, PrincipalSource
]]

[LocalGroup]
CimCollect=No
Name=Name
s=[[...[[
	Import-Module Microsoft.Powershell.LocalAccounts
	Get-LocalGroup |Select Name, Description, SID, PrincipalSource 
]]...]]

[ScheduledTasks]
Name=TaskName
s=[[---[[
Get-ScheduledTask "*" |
    Select TaskName, TaskPath, State, Principal, Actions, Triggers, User, ExeLine, Parameters, Start, Days, Repetition|
        ForEach-Object -Process {$_.User = ($_.Principal.Userid); 
                                 $_.ExeLine = ($_.Actions.Execute); 
                                 $_.Parameters = ($_.Actions.Arguments); 
                                 $_.Start = $_.Triggers.StartBoundary;
                                 $_.Days = $_.Triggers.DaysInterval;
                                 $_.Repetition = $_.Triggers.Repetition.Interval;
                                 $_} | 
                                 
    Select TaskName, TaskPath, State, User, ExeLine, Parameters, Triggers, Start, Days, Repetition 
]]---]]

[PIArchives]
CimCollect=No
Name=Path
s=[[---[[
$PIServername = $env:COMPUTERNAME
#$PIServername
# Get the PI server object, exit if there is an error retrieving the server
$srv = Get-PIDataArchiveConnectionConfiguration -Name $PIServerName -ErrorAction Stop
$connection = Connect-PIDataArchive -PIDataArchiveConnectionConfiguration $srv -ErrorAction Stop
#	[Version] $v395 = "3.4.395"
#if ($connection.ServerVersion -gt $v395)
#{
#   $archives = Get-PIArchiveFileInfo -Connection $connection -ArchiveSet 0 -ErrorAction Stop
#}
#else
#{
   $archives = Get-PIArchiveFileInfo -Connection $connection -ErrorAction Stop
#}
#$archives | fl *

$archives | 
    Select Path, StartTime, EndTime, LastModifiedTime, LastBackupTime, 
           IsCorrupt, ArchiveSet, Version, Type, State, IsWritable, IsShiftable, Index, 
           FreeprimaryRecords, FreeOverflowRecords, MaxPrimaryRecords, MaxOverflowRecords,
           TotalEvents, PercentFull, AverageEventsPerRecordCount, AddRatePerHour, FileSizeGB |
    ForEach-Object -Process {
        $file = (dir $_.Path);
        #$_.FileSizeGB = ([Int]($file.Length/1MB))/1KB;
        $_.FileSizeGB = ([Math]::Round($file.Length/1GB, 3));
        $_
    }     
]]---]]

[Environment]
Name=Name
s=[[---[[

$hash=[Environment]::GetEnvironmentVariables("Machine")
$hash | foreach getEnumerator | 
    Select-Object -Property @{Label="Mode"; Expression={"Machine"}},
                            @{Label="Name"; Expression={$_.Key}},
                            @{Label="Value"; Expression={$_.Value}}

$hash=[Environment]::GetEnvironmentVariables("User")
$hash | foreach getEnumerator | 
    Select-Object -Property @{Label="Mode"; Expression={"User"}},
                            @{Label="Name"; Expression={$_.Key}},
                            @{Label="Value"; Expression={$_.Value}}

$hash=[Environment]::GetEnvironmentVariables("Process")
$hash | foreach getEnumerator | 
    Select-Object -Property @{Label="Mode"; Expression={"Process"}},
                            @{Label="Name"; Expression={$_.Key}},
                            @{Label="Value"; Expression={$_.Value}}


]]---]]

[Hosts]
Name=Address
s=[[...[[
Get-Content -Path "$env:windir\System32\Drivers\Etc\hosts." | 
	ForEach {$_.Trim()} | 
	Select-String -Pattern "^#.*$|^$" -NotMatch |
	foreach{
		$a,$b = $_ -replace '(^\s+|\s+$)','' -replace '\s+',' ' -split ' ', 2; 
		Write-Output "hosts=$a=$b"}|
		ConvertFrom-String -delimiter '=' -PropertyNames FileName,Address,Host
]]...]]

[Programs]
; started from https://blogs.technet.microsoft.com/heyscriptingguy/2011/11/13/use-powershell-to-quickly-find-installed-software/
Name=Key
s=[[...[[

 #Define the variable to hold the location of Currently Installed Programs
 $UninstallKey="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall" 
 $regviews = {[Microsoft.Win32.RegistryView]::Registry32, [Microsoft.Win32.RegistryView]::Registry64}
 $array = @()
 #Create an instance of the Registry Object and open the HKLM base key
 foreach ($view in $regviews){
    $reg=[microsoft.win32.registrykey]::OpenBaseKey('LocalMachine',[Microsoft.Win32.RegistryView]::Registry32)
    #Drill down into the Uninstall key using the OpenSubKey Method
    $regkey=$reg.OpenSubKey($UninstallKey) 
    #Retrieve an array of string that contain all the subkey names
    $subkeys=$regkey.GetSubKeyNames() 
    #Open each Subkey and use GetValue Method to return the required values for each
    foreach($key in $subkeys){
        $thisKey=$UninstallKey+"\\"+$key 
        $tSK=$reg.OpenSubKey($thisKey) 
        $obj = New-Object PSObject
        $obj | Add-Member -MemberType NoteProperty -Name "Key" -Value $key
        $obj | Add-Member -MemberType NoteProperty -Name "DisplayName" -Value $($tSK.GetValue("DisplayName"))
        $obj | Add-Member -MemberType NoteProperty -Name "DisplayVersion" -Value $($tSK.GetValue("DisplayVersion"))
        $obj | Add-Member -MemberType NoteProperty -Name "Version" -Value $($tSK.GetValue("Version"))
        $obj | Add-Member -MemberType NoteProperty -Name "Publisher" -Value $($tSK.GetValue("Publisher"))
        $obj | Add-Member -MemberType NoteProperty -Name "InstallLocation" -Value $($tSK.GetValue("InstallLocation"))
        $obj | Add-Member -MemberType NoteProperty -Name "UninstallString" -Value $($tSK.GetValue("UninstallString"))
        $obj | Add-Member -MemberType NoteProperty -Name "InstallSource" -Value $($tSK.GetValue("InstallSource"))
        $obj | Add-Member -MemberType NoteProperty -Name "InstallDate" -Value $($tSK.GetValue("InstallDate"))
        $obj | Add-Member -MemberType NoteProperty -Name "Comments" -Value $($tSK.GetValue("Commments"))
        $obj | Add-Member -MemberType NoteProperty -Name "SystemComponent" -Value $($tSK.GetValue("SystemComponent"))
        $obj | Add-Member -MemberType NoteProperty -Name "Language" -Value $($tSK.GetValue("Language"))
        $obj | Add-Member -MemberType NoteProperty -Name "NoModify" -Value $($tSK.GetValue("NoModify"))
        $obj | Add-Member -MemberType NoteProperty -Name "NoRepair" -Value $($tSK.GetValue("NoRepair"))
        $obj | Add-Member -MemberType NoteProperty -Name "ReleaseTrain" -Value $($tSK.GetValue("ReleaseTrain"))
        $obj | Add-Member -MemberType NoteProperty -Name "User" -Value $($tSK.GetValue("User"))
        $obj | Add-Member -MemberType NoteProperty -Name "WindowsInstaller" -Value $($tSK.GetValue("WindowsInstaller"))
        $array += $obj
    } 
}
$array | 
	select Key, DisplayName, DisplayVersion, Version, Publisher, 
            InstallLocation, UninstallString, InstallSource, InstallDate, Comments,
            SystemComponent, Language, NoModify, NoRepair, ReleaseTrain, User, Windowsinstaller



]]...]]

[ADInformation]
; select server name and OU path and OSName and last updated date from the AD
; for all servers matching the first letters of the server name
; eg server1o, server1, server1n

[tcpip]
; select server name and dns addresses
; for all servers matching the first letters of the server name
; eg server1o, server1, server1n, pingability


[files]
; collect pipc.ini, 32 & 64
; collect pilogin.ini, 32 & 64

[Hosts]
File=%windir%\System32\drivers\etc\hosts.
TrimSpace=All
;TrimSpace=Edge
Comment=#
Missing=*No Hosts*

[OtherList]
File=%programfiles%\Company\Project\Program\List.txt
TrimSpace=All
; server, section, line#, line text
Missing=*No List.txt*

[piarchives]
; collect pi archives and status, name, start/end, type, etc


[shares]
; collect share info - might be in other program, if we keep it


[LocalGroupMemberships]
; collect groupname, membertype, membername, memberdomain


[PiInterfaces]
; pi interfaces - no idea how to collect this
; pitopi, local, connections, remote server id, interface id, point source?, interface type
; from network manager statistics
; from MDB
; batchfl, ufl

[PIInterfaceServers]
; disk space of interface nodes?


[SQLServerDatabases]
; database names
; names, dates, hash, scripts:
; tables, views
; record counts
; synonyms
; columns, names, types, nullable, length

; stored procedures, names, dates
; parameters, types, lengths

; sql jobs, schedules, status

[patch status]
; patches installed?
; reboot window?

[computer account group memberships]
; group names, sids for this computer

[networkinterfaces]
; intercaes, MACs, protocols, ip addresses, routing tables

[folderinventory]
; folder name, path, file counts
; file info, name, version, dates, sha-hash
; newest and oldest log or other files
; count of files by file type

[timezone]
; server timezone info

[serveradministratorsgroups]
; probably above already

[dcomcomponents]
; installed dcom components, name, account mode, service accounts, exe/dll paths, active/inactive

[selected registry values]
; keys and values and types
; pims 64/32
; hklm\sw\e c c\pims
; pisystem values

; pi kst

[uc4global]
; c:\uc4global, c:\automic, c:\uc4

[odbc]
; 64/32
; odbc names, drivers, conx info

[pitimezone]
; c:\pi\dat\localhost.tz file checksum and time zone info

[piace1]
; contexts, exe name, schedule, enabled

[piace2]
; contexts, dll name, schedule, enabled

[iismappings]
; iis pools
; iis applications
; iis folders

[piversion]
; pi services versions
; pidiag -ver

; pipc.ini

[settings]
; inventory of programdata\eastman\settings.xml files and *.config


[smtp]
; smtp service info from iis
; delivery,etc
; domains

[eventlog]
; event log name, message counts per type per hour
; startup messages?

[pipointcount]
; snapshot points
; base points

[piserverid]
; server id

[sqlaccounts]
; logins, mappings

[pisecuritysettings]
; security policy setttings

[pilicense]
; license info

[folderaccess]
; acls in folders
; ace ids in folders

[sytags]
; all sy:*.sv tags, names, types, and values

[pialiases]
; pi server alias and values

[secpol]
; policy names and values for selected values
; log on as batch, service, rights level

[SPN]
; spns for server names, for all accounts on services and iis pools
; spns for sql server, piserver, http, file, ...

; up to page 45

[ad services accounts]
; trusted for delegation 
; delegation to, kerberos, ..


; up to page 55;